<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PostMicroservice</name>
    </assembly>
    <members>
        <member name="T:PostMicroservice.Controllers.ContentController">
            <summary>
            Content controller to perform crud operations.
            </summary>
        </member>
        <member name="M:PostMicroservice.Controllers.ContentController.GetContents(System.String)">
            <summary>
            Returns list of all contents.
            </summary>
            <param name="title">Title of the content</param>
            <returns>List of all contents</returns>
             /// <remarks> 
            Example of request \
            GET '/api/contents' 
            </remarks>
            <response code="200">Success, returns list of all contents.</response>
            <response code="204">No contents found.</response>
            <response code="500">Server error.</response>
        </member>
        <member name="M:PostMicroservice.Controllers.ContentController.GetContentById(System.Guid)">
            <summary>
            Returns a content based on the forwarded id.
            </summary>
            <param name="contentId">ID of the content</param>
             /// <remarks>        
            Example of request \
            GET '/api/contents/' \
            param  'contentId = 2959689a-c09f-4c0b-6ceb-08d96643ade7'
            </remarks>
            <response code="200">Success, returns the specified content.</response>
            <response code="404">A content with that ID does not exist.</response>
            <response code="500">Server error.</response>
        </member>
        <member name="M:PostMicroservice.Controllers.ContentController.CreateContent(PostMicroservice.Models.ContentDto.ContentCreationDto,System.String)">
             /// <summary>
             Add new content.
             </summary>
             <param name="content">Model of content</param>
             <param name="key">Key for authorization user</param>
             <remarks>
             Example of request \
             POST /api/contents \
             header 'key: Bearer Milica' \
             {     \
                 "title" : "Prodaja rolera",\
                 "text" : "Prodajem rolere stare 6 mjeseci, u odličnom stanju.",\
                 "replacement" : false,\
                 "state" : "odlicno",\
                 "itemForSaleID" : 5 \
            }
             </remarks>
             <response code="201">Successfully added content.</response>
             <response code="400">Bad request, object for sale with that ID does not exist.</response>
             <response code="401">Unauthorized user.</response>
             <response code="500">Server error.</response>
        </member>
        <member name="M:PostMicroservice.Controllers.ContentController.UpdateContent(PostMicroservice.Models.ContentDto.ContentUpdateDto,System.String)">
             <summary>
             Update content with forwarded ID.
             </summary>
             <param name="content">Model of the content to be updated.</param>
             <param name="key">Key for authorization user</param>
             <remarks>
             Example of request \
             PUT /api/contents \
             header 'key: Bearer Milica' \
              {     \
                 "contentID" : "2959689a-c09f-4c0b-6ceb-08d96643ade7",\
                 "title" : "Prodaja rolera",\
                 "text" : "Prodajem rolere stare 6 mjeseci, u odličnom stanju.",\
                 "replacement" : false,\
                 "state" : "odlicno",\
                 "itemForSaleID" : 5 \
            }
             </remarks>
             <response code="200">Success, returns updated content.</response>
              <response code="400">Bad request, object for sale with that ID does not exist.</response>
             <response code="401">Unauthorized user.</response>
             <response code="404">A content with that ID does not exist.</response>
             <response code="500">Server error.</response>
        </member>
        <member name="M:PostMicroservice.Controllers.ContentController.DeleteContent(System.Guid,System.String)">
            <summary>
            Delete content based on the forwarded ID.
            </summary>
            <param name="contentId">ID of the content</param>
            <param name="key">User authorization key</param>
            <remarks>
            Example of request \
            DELETE '/api/contents/'\
             header 'key: Bearer Milica' \
             param  'contentId = ad369512-e9c6-4f44-a5d9-08d96a32dba3' 
            </remarks>
            <response code="204">Success, deleted content.</response>
            <response code="401">Unauthorized user.</response>
            <response code="404">Content not found.</response>
            <response code="500">Server error.</response>
        </member>
        <member name="M:PostMicroservice.Controllers.ContentController.GetContentOptions">
            <summary>
            Returns options for working with contents.
            </summary>
            <remarks>
            Example of request \
            OPTIONS '/api/contents'
            </remarks>
        </member>
        <member name="T:PostMicroservice.Controllers.PictureController">
            <summary>
            Picture controller to perform crud operations.
            </summary>
        </member>
        <member name="M:PostMicroservice.Controllers.PictureController.GetPictures(System.Nullable{System.Guid})">
            <summary>
            Returns list of all pictures.
            </summary>
            <param name="postID">ID of the post</param>
            <returns>List of all pictures</returns>
             /// <remarks> 
            Example of request \
            GET '/api/pictures' \
              param  'postId = 5cee7f04-b84b-480a-b930-08d9689a8b7c'
            </remarks>
            <response code="200">Success, returns list of all pictures.</response>
            <response code="204">No pictures found.</response>
            <response code="500">Server error.</response>
        </member>
        <member name="M:PostMicroservice.Controllers.PictureController.GetPictureById(System.Guid)">
            <summary>
            Returns a picture based on the forwarded id.
            </summary>
            <param name="pictureId">ID of the picture</param>
             /// <remarks>        
            Example of request \
            GET 'https://localhost:44200/api/pictures/' \
                param  'pictureId = d0e5b759-f1bf-490c-a7fa-08d968a6710c'
            </remarks>
            <response code="200">Success, returns the specified picture.</response>
            <response code="404">A photo with that ID does not exist.</response>
            <response code="500">Server error.</response>
        </member>
        <member name="M:PostMicroservice.Controllers.PictureController.CreatePicture(PostMicroservice.Models.PictureCreationDto,System.String)">
             /// <summary>
             Add new picture.
             </summary>
             <param name="picture">Model of picture</param>
             <param name="key">Key for authorization user</param>
             <remarks>
             Example of request \
             POST /api/pictures \
             header 'key: Bearer Milica' \
             {     \
                 "url" : "url",\
                 "postID" : "5cee7f04-b84b-480a-b930-08d9689a8b7c" \
            }
             </remarks>
             <response code="201">Successfully added photo.</response>
             <response code="400">Bad request, post with that ID does not exist.</response>
             <response code="401">Unauthorized user.</response>
             <response code="500">Server error.</response>
        </member>
        <member name="M:PostMicroservice.Controllers.PictureController.UpdatePicture(PostMicroservice.Models.PictureUpdateDto,System.String)">
             <summary>
             Update picture with forwarded ID.
             </summary>
             <param name="picture">Model of the picture to be updated.</param>
             <param name="key">Key for authorization user</param>
             <remarks>
             Example of request \
             PUT /api/pictures \
             header 'key: Bearer Milica' \
             {     \
                "pictureId": "d0e5b759-f1bf-490c-a7fa-08d968a6710c",\
             "url": "URL1",\
             "postID": "5cee7f04-b84b-480a-b930-08d9689a8b7c"\
            }
             </remarks>
             <response code="200">Success, returns updated picture.</response>
              <response code="400">Bad request, post with that ID does not exist.</response>
             <response code="401">Unauthorized user.</response>
             <response code="404">A picture with that ID does not exist.</response>
             <response code="500">Server error.</response>
        </member>
        <member name="M:PostMicroservice.Controllers.PictureController.DeletePicture(System.Guid,System.String)">
            <summary>
            Delete picture based on the forwarded ID.
            </summary>
            <param name="pictureId">ID of the picture</param>
            <param name="key">User authorization key</param>
            <remarks>
            Example of request \
            DELETE '/api/pictures/'\
             header 'key: Bearer Milica' \
             param  'pictureId = bc2b117e-7eda-44c0-981d-08d96a33dc15' 
            </remarks>
            <response code="204">Success, deleted picture.</response>
            <response code="401">Unauthorized user.</response>
            <response code="404">Picture not found.</response>
            <response code="500">Server error.</response>
        </member>
        <member name="M:PostMicroservice.Controllers.PictureController.GetPictureOptions">
            <summary>
            Returns options for working with pictures.
            </summary>
            <remarks>
            Example of request \
            OPTIONS '/api/pictures'
            </remarks>
        </member>
        <member name="T:PostMicroservice.Controllers.PostController">
            <summary>
            Post controller to perform crud operations.
            </summary>
        </member>
        <member name="M:PostMicroservice.Controllers.PostController.GetPosts(System.String,System.Int32)">
            <summary>
            Returns list of all posts.
            For the passed username parameter, returns all posts of that user, provided it is not blocked.
            </summary>
             <param name="userName">Username of the user who posted the post</param>
             <param name="accountID">Id of user who sent request</param>
            <returns>List of all posts</returns>
             /// <remarks> 
            Example of request \
            GET '/api/posts' \
            param  'userName = verica_lulic' \
            param  'userName = marija_krivokuca' \ blocked user \
            param  'accountId = 5' \
            </remarks>
            <response code="200">Success, returns list of all posts.</response>
            <response code="204">No posts found.</response>
            <response code="400">Bad request, user is blocked.</response>
            <response code="500">Server error.</response>
        </member>
        <member name="M:PostMicroservice.Controllers.PostController.GetPostsFromWall(System.Nullable{System.DateTime},System.Int32)">
            <summary>
            Returns all posts from the wall, exactly all the posts of the users we follow.
            </summary>
            <param name="dateOfPublication">Date of publication post</param>
            <returns>List of all posts from the wall</returns>
             /// <remarks> 
            Example of request \
            GET '/api/posts' \
            param  'dateOfPublication = 2021-08-27T11:44:47.9864747' \
            param  'accountId = 7' \
            </remarks>
            <response code="200">Success, returns list of all posts from the wall.</response>
            <response code="204">No posts found.</response>
            <response code="500">Server error.</response>
        </member>
        <member name="M:PostMicroservice.Controllers.PostController.GetPostById(System.Guid)">
            <summary>
            Returns a post based on the forwarded id.
            </summary>
            <param name="postId">ID of the post</param>
            <remarks>        
            Example of request \
            GET '/api/posts/' \
            param  'postId = 5cee7f04-b84b-480a-b930-08d9689a8b7c'
            </remarks>
            <response code="200">Success, returns the specified post.</response>
            <response code="404">A post with that ID does not exist.</response>
            <response code="500">Server error.</response>
        </member>
        <member name="M:PostMicroservice.Controllers.PostController.CreatePost(PostMicroservice.Models.PostDto.PostCreationDto,System.String)">
            /// <summary>
            Add new post.
            </summary>
            <param name="post">Model of post</param>
            <param name="key">Key for authorization user</param>
            <remarks>
            Example of request \
            POST /api/posts \
            header 'key: Bearer Milica' \
            {      \
             "contentId" : "2959689a-c09f-4c0b-6ceb-08d96643ade7",  \
              "userId" : 5  \
             } 
            </remarks>
            <response code="201">Successfully added post.</response>
            <response code="400">Bad request, user or content with that id does not exists.</response>
            <response code="401">Unauthorized user.</response>
            <response code="500">Server error.</response>
        </member>
        <member name="M:PostMicroservice.Controllers.PostController.UpdatePost(PostMicroservice.Models.PostDto.PostUpdateDto,System.Int32,System.String)">
            <summary>
            Update post with forwarded ID.
            </summary>
            <param name="post">Model of the post to be updated.</param>
            <param name="key">Key for authorization user</param>
            <remarks>
            Example of request \
            PUT /api/posts \
            header 'key: Bearer Milica' \
            header 'accountId = 5' \ 
            {       \
               "postId": "5cee7f04-b84b-480a-b930-08d9689a8b7c", \
               "contentId": "2959689a-c09f-4c0b-6ceb-08d96643ade7", \
                "userId": 5 \
            }
            </remarks>
            <response code="200">Success, returns updated post.</response>
            <response code="400">Bad request, content or user with that ID does not exist.</response>
            <response code="401">Unauthorized user.</response>
            <response code="403">Not allowed</response>
            <response code="404">A post with that ID does not exist.</response>
            <response code="500">Server error.</response>
        </member>
        <member name="M:PostMicroservice.Controllers.PostController.DeletePost(System.Guid,System.String,System.Int32)">
            <summary>
            Delete post based on the forwarded ID.
            </summary>
            <param name="postID">ID of the post</param>
            <param name="key">User authorization key</param>
            <remarks>
            Example of request \
            DELETE '/api/posts/'\
             header 'key: Bearer Milica' \
             header 'accountId = 5'  \
             param  'postId = 2959689a-c09f-4c0b-6ceb-08d96643ade7'  \
            </remarks>
            <response code="204">Success, deleted post.</response>
            <response code="401">Unauthorized user.</response>
             <response code="403">Not allowed.</response>
            <response code="404">Post not found.</response>
            <response code="500">Server error.</response>
        </member>
        <member name="M:PostMicroservice.Controllers.PostController.GetPostOptions">
            <summary>
            Returns options for working with posts.
            </summary>
            <remarks>
            Example of request \
            OPTIONS '/api/posts'
            </remarks>
        </member>
        <member name="T:PostMicroservice.Entities.Content">
            <summary>
            Entity class which represents content of the post
            </summary>
        </member>
        <member name="P:PostMicroservice.Entities.Content.ContentId">
            <summary>
            Content ID.
            </summary>
        </member>
        <member name="P:PostMicroservice.Entities.Content.Title">
            <summary>
            Title of the content.
            </summary>
        </member>
        <member name="P:PostMicroservice.Entities.Content.Text">
            <summary>
            Text of the content.
            </summary>
        </member>
        <member name="P:PostMicroservice.Entities.Content.Replacement">
            <summary>
            The possibility of replacing the content that is published.
            </summary>
        </member>
        <member name="P:PostMicroservice.Entities.Content.State">
            <summary>
            The state of the content that is published.
            </summary>
        </member>
        <member name="P:PostMicroservice.Entities.Content.ItemForSaleID">
            <summary>
            ID of item for sale.
            </summary>
        </member>
        <member name="T:PostMicroservice.Entities.Picture">
            <summary>
            Entity class which represents image
            </summary>
        </member>
        <member name="P:PostMicroservice.Entities.Picture.PictureId">
            <summary>
            Image ID.
            </summary>
        </member>
        <member name="P:PostMicroservice.Entities.Picture.Url">
            <summary>
            Url path of the image.
            </summary>
        </member>
        <member name="P:PostMicroservice.Entities.Picture.PostID">
            <summary>
            ID of the post for which the image was published.
            </summary>
        </member>
        <member name="T:PostMicroservice.Entities.Post">
            <summary>
            Entity class which represents post
            </summary>
        </member>
        <member name="P:PostMicroservice.Entities.Post.PostId">
            <summary>
            Post ID
            </summary>
        </member>
        <member name="P:PostMicroservice.Entities.Post.DateOfPublication">
            <summary>
            Date and time publication of the post.
            </summary>
        </member>
        <member name="P:PostMicroservice.Entities.Post.ExpiryDate">
            <summary>
            Date and time of publication expiration.
            </summary>
        </member>
        <member name="P:PostMicroservice.Entities.Post.ContentId">
            <summary>
            Content of the post.
            </summary>
        </member>
        <member name="P:PostMicroservice.Entities.Post.UserId">
            <summary>
            Id of the user who posted the post.
            </summary>
        </member>
        <member name="T:PostMicroservice.Entities.UserAccountDto">
            <summary>
            An identifier for the user account
            </summary>
        </member>
        <member name="P:PostMicroservice.Entities.UserAccountDto.UserAccountId">
            <summary>
            ID of user account
            </summary>
        </member>
        <member name="P:PostMicroservice.Entities.UserAccountDto.UserName">
            <summary>
            Username of the user account
            </summary>
        </member>
        <member name="T:PostMicroservice.Models.ContentDto.ContentConfirmationDto">
            <summary>
            DTO class which represents model of content for confirmation.
            </summary>
        </member>
        <member name="P:PostMicroservice.Models.ContentDto.ContentConfirmationDto.ContentId">
            <summary>
            Content ID.
            </summary>
        </member>
        <member name="P:PostMicroservice.Models.ContentDto.ContentConfirmationDto.Title">
            <summary>
            Title of the content.
            </summary>
        </member>
        <member name="P:PostMicroservice.Models.ContentDto.ContentConfirmationDto.Text">
            <summary>
            Text of the content.
            </summary>
        </member>
        <member name="P:PostMicroservice.Models.ContentDto.ContentConfirmationDto.Replacement">
            <summary>
            The possibility of replacing the content that is published.
            </summary>
        </member>
        <member name="P:PostMicroservice.Models.ContentDto.ContentConfirmationDto.State">
            <summary>
            The state of the content that is published.
            </summary>
        </member>
        <member name="P:PostMicroservice.Models.ContentDto.ContentConfirmationDto.ItemForSaleID">
            <summary>
            ID of item for sale.
            </summary>
        </member>
        <member name="T:PostMicroservice.Models.ContentDto.ContentCreationDto">
            <summary>
            DTO class which represents model of content for creation.
            </summary>
        </member>
        <member name="P:PostMicroservice.Models.ContentDto.ContentCreationDto.Title">
            <summary>
            Title of the content.
            </summary>
        </member>
        <member name="P:PostMicroservice.Models.ContentDto.ContentCreationDto.Text">
            <summary>
            Text of the content.
            </summary>
        </member>
        <member name="P:PostMicroservice.Models.ContentDto.ContentCreationDto.Replacement">
            <summary>
            The possibility of replacing the content that is published.
            </summary>
        </member>
        <member name="P:PostMicroservice.Models.ContentDto.ContentCreationDto.State">
            <summary>
            The state of the content that is published.
            </summary>
        </member>
        <member name="P:PostMicroservice.Models.ContentDto.ContentCreationDto.ItemForSaleID">
            <summary>
            ID of item for sale.
            </summary>
        </member>
        <member name="T:PostMicroservice.Models.ContentDto.ContentDto">
            <summary>
            DTO class which represents model of content.
            </summary>
        </member>
        <member name="P:PostMicroservice.Models.ContentDto.ContentDto.ContentId">
            <summary>
            Content ID.
            </summary>
        </member>
        <member name="P:PostMicroservice.Models.ContentDto.ContentDto.Title">
            <summary>
            Title of the content.
            </summary>
        </member>
        <member name="P:PostMicroservice.Models.ContentDto.ContentDto.Text">
            <summary>
            Text of the content.
            </summary>
        </member>
        <member name="P:PostMicroservice.Models.ContentDto.ContentDto.Replacement">
            <summary>
            The possibility of replacing the content that is published.
            </summary>
        </member>
        <member name="P:PostMicroservice.Models.ContentDto.ContentDto.State">
            <summary>
            The state of the content that is published.
            </summary>
        </member>
        <member name="P:PostMicroservice.Models.ContentDto.ContentDto.ItemForSaleID">
            <summary>
            ID of item for sale.
            </summary>
        </member>
        <member name="T:PostMicroservice.Models.ContentDto.ContentUpdateDto">
            <summary>
            DTO class which represents model of content for update.
            </summary>
        </member>
        <member name="P:PostMicroservice.Models.ContentDto.ContentUpdateDto.ContentId">
            <summary>
            Content ID.
            </summary>
        </member>
        <member name="P:PostMicroservice.Models.ContentDto.ContentUpdateDto.Title">
            <summary>
            Title of the content.
            </summary>
        </member>
        <member name="P:PostMicroservice.Models.ContentDto.ContentUpdateDto.Text">
            <summary>
            Text of the content.
            </summary>
        </member>
        <member name="P:PostMicroservice.Models.ContentDto.ContentUpdateDto.Replacement">
            <summary>
            The possibility of replacing the content that is published.
            </summary>
        </member>
        <member name="P:PostMicroservice.Models.ContentDto.ContentUpdateDto.State">
            <summary>
            The state of the content that is published.
            </summary>
        </member>
        <member name="P:PostMicroservice.Models.ContentDto.ContentUpdateDto.ItemForSaleID">
            <summary>
            ID of item for sale.
            </summary>
        </member>
        <member name="P:PostMicroservice.Models.BlockMockDto.BlockingID">
            <summary>
            ID of block
            </summary>
        </member>
        <member name="P:PostMicroservice.Models.BlockMockDto.BlockerID">
            <summary>
            Id of the user who blocked another user.
            </summary>
        </member>
        <member name="P:PostMicroservice.Models.BlockMockDto.BlockedID">
            <summary>
            Id of the blocked user.
            </summary>
        </member>
        <member name="T:PostMicroservice.Models.FollowMockDto">
            <summary>
            DTO model for following user
            </summary>
        </member>
        <member name="P:PostMicroservice.Models.FollowMockDto.FollowingID">
            <summary>
            ID of following
            </summary>
        </member>
        <member name="P:PostMicroservice.Models.FollowMockDto.FollowerID">
            <summary>
            Id of the user who followed the other user
            </summary>
        </member>
        <member name="P:PostMicroservice.Models.FollowMockDto.FollowedID">
            <summary>
            Id of the user followed by another user
            </summary>
        </member>
        <member name="P:PostMicroservice.Models.ObjectForSaleDto.ObjectForSaleId">
            <summary>
            ID of object for sale
            </summary>
        </member>
        <member name="P:PostMicroservice.Models.ObjectForSaleDto.Name">
            <summary>
            Name of object for sale
            </summary>
        </member>
        <member name="T:PostMicroservice.Models.PictureConfirmationDto">
            <summary>
            DTO class which represents model of picture for confirmation.
            </summary>
        </member>
        <member name="P:PostMicroservice.Models.PictureConfirmationDto.PictureId">
            <summary>
            Picture ID.
            </summary>
        </member>
        <member name="P:PostMicroservice.Models.PictureConfirmationDto.Url">
            <summary>
            Url path of the picture.
            </summary>
        </member>
        <member name="P:PostMicroservice.Models.PictureConfirmationDto.PostID">
            <summary>
            ID of the post for which the picture was published.
            </summary>
        </member>
        <member name="T:PostMicroservice.Models.PictureCreationDto">
            <summary>
            DTO class which represents model of picture for creation.
            </summary>
        </member>
        <member name="P:PostMicroservice.Models.PictureCreationDto.Url">
            <summary>
            Url path of the picture.
            </summary>
        </member>
        <member name="P:PostMicroservice.Models.PictureCreationDto.PostID">
            <summary>
            ID of the post for which the picture was published.
            </summary>
        </member>
        <member name="T:PostMicroservice.Models.PictureDto">
            <summary>
            DTO class which represents picture.
            </summary>
        </member>
        <member name="P:PostMicroservice.Models.PictureDto.PictureId">
            <summary>
            Picture ID.
            </summary>
        </member>
        <member name="P:PostMicroservice.Models.PictureDto.Url">
            <summary>
            Url path of the picture.
            </summary>
        </member>
        <member name="P:PostMicroservice.Models.PictureDto.PostID">
            <summary>
            ID of the post for which the picture was published.
            </summary>
        </member>
        <member name="T:PostMicroservice.Models.PictureUpdateDto">
            <summary>
            DTO class which represents model of picture for update.
            </summary>
        </member>
        <member name="P:PostMicroservice.Models.PictureUpdateDto.PictureId">
            <summary>
            Picture ID.
            </summary>
        </member>
        <member name="P:PostMicroservice.Models.PictureUpdateDto.Url">
            <summary>
            Url path of the picture.
            </summary>
        </member>
        <member name="P:PostMicroservice.Models.PictureUpdateDto.PostID">
            <summary>
            ID of the post for which the picture was published.
            </summary>
        </member>
        <member name="T:PostMicroservice.Models.PostDto.PostConfirmationDto">
            <summary>
            DTO class which represents post for confirmation.
            </summary>
        </member>
        <member name="P:PostMicroservice.Models.PostDto.PostConfirmationDto.PostId">
            <summary>
            Post ID
            </summary>
        </member>
        <member name="P:PostMicroservice.Models.PostDto.PostConfirmationDto.DateOfPublication">
            <summary>
            Date and time publication of the post.
            </summary>
        </member>
        <member name="P:PostMicroservice.Models.PostDto.PostConfirmationDto.ExpiryDate">
            <summary>
            Date and time of publication expiration.
            </summary>
        </member>
        <member name="P:PostMicroservice.Models.PostDto.PostConfirmationDto.ContentId">
            <summary>
            Content of the post.
            </summary>
        </member>
        <member name="P:PostMicroservice.Models.PostDto.PostConfirmationDto.UserId">
            <summary>
            Id of the user who posted the post.
            </summary>
        </member>
        <member name="T:PostMicroservice.Models.PostDto.PostCreationDto">
            <summary>
            DTO class which represents post.
            </summary>
        </member>
        <member name="P:PostMicroservice.Models.PostDto.PostCreationDto.ContentId">
            <summary>
            Content of the post.
            </summary>
        </member>
        <member name="P:PostMicroservice.Models.PostDto.PostCreationDto.UserId">
            <summary>
            Id of the user who posted the post.
            </summary>
        </member>
        <member name="T:PostMicroservice.Models.PostDto.PostDto">
            <summary>
            DTO class which represents post.
            </summary>
        </member>
        <member name="P:PostMicroservice.Models.PostDto.PostDto.PostId">
            <summary>
            Post ID
            </summary>
        </member>
        <member name="P:PostMicroservice.Models.PostDto.PostDto.DateOfPublication">
            <summary>
            Date and time publication of the post.
            </summary>
        </member>
        <member name="P:PostMicroservice.Models.PostDto.PostDto.ExpiryDate">
            <summary>
            Date and time of publication expiration.
            </summary>
        </member>
        <member name="P:PostMicroservice.Models.PostDto.PostDto.ContentId">
            <summary>
            Content of the post.
            </summary>
        </member>
        <member name="P:PostMicroservice.Models.PostDto.PostDto.UserId">
            <summary>
            Id of the user who posted the post.
            </summary>
        </member>
        <member name="T:PostMicroservice.Models.PostDto.PostUpdateDto">
            <summary>
            DTO class which represents post for update.
            </summary>
        </member>
        <member name="P:PostMicroservice.Models.PostDto.PostUpdateDto.PostId">
            <summary>
            Post ID
            </summary>
        </member>
        <member name="P:PostMicroservice.Models.PostDto.PostUpdateDto.ContentId">
            <summary>
            Content of the post.
            </summary>
        </member>
        <member name="P:PostMicroservice.Models.PostDto.PostUpdateDto.UserId">
            <summary>
            Id of the user who posted the post.
            </summary>
        </member>
    </members>
</doc>
